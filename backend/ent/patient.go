// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/panupong/app/ent/gender"
	"github.com/panupong/app/ent/job"
	"github.com/panupong/app/ent/patient"
	"github.com/panupong/app/ent/title"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CardID holds the value of the "Card_id" field.
	CardID string `json:"Card_id,omitempty"`
	// FirstName holds the value of the "First_name" field.
	FirstName string `json:"First_name,omitempty"`
	// LastName holds the value of the "Last_name" field.
	LastName string `json:"Last_name,omitempty"`
	// Allergic holds the value of the "Allergic" field.
	Allergic string `json:"Allergic,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// Age holds the value of the "Age" field.
	Age int `json:"Age,omitempty"`
	// Birthday holds the value of the "Birthday" field.
	Birthday time.Time `json:"Birthday,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges     PatientEdges `json:"edges"`
	gender_id *int
	job_id    *int
	title_id  *int
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// Gender holds the value of the gender edge.
	Gender *Gender
	// Title holds the value of the title edge.
	Title *Title
	// Job holds the value of the job edge.
	Job *Job
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[0] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// TitleOrErr returns the Title value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) TitleOrErr() (*Title, error) {
	if e.loadedTypes[1] {
		if e.Title == nil {
			// The edge title was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: title.Label}
		}
		return e.Title, nil
	}
	return nil, &NotLoadedError{edge: "title"}
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) JobOrErr() (*Job, error) {
	if e.loadedTypes[2] {
		if e.Job == nil {
			// The edge job was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: job.Label}
		}
		return e.Job, nil
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Card_id
		&sql.NullString{}, // First_name
		&sql.NullString{}, // Last_name
		&sql.NullString{}, // Allergic
		&sql.NullString{}, // Address
		&sql.NullInt64{},  // Age
		&sql.NullTime{},   // Birthday
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Patient) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // gender_id
		&sql.NullInt64{}, // job_id
		&sql.NullInt64{}, // title_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Card_id", values[0])
	} else if value.Valid {
		pa.CardID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field First_name", values[1])
	} else if value.Valid {
		pa.FirstName = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Last_name", values[2])
	} else if value.Valid {
		pa.LastName = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Allergic", values[3])
	} else if value.Valid {
		pa.Allergic = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Address", values[4])
	} else if value.Valid {
		pa.Address = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Age", values[5])
	} else if value.Valid {
		pa.Age = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Birthday", values[6])
	} else if value.Valid {
		pa.Birthday = value.Time
	}
	values = values[7:]
	if len(values) == len(patient.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field gender_id", value)
		} else if value.Valid {
			pa.gender_id = new(int)
			*pa.gender_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field job_id", value)
		} else if value.Valid {
			pa.job_id = new(int)
			*pa.job_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field title_id", value)
		} else if value.Valid {
			pa.title_id = new(int)
			*pa.title_id = int(value.Int64)
		}
	}
	return nil
}

// QueryGender queries the gender edge of the Patient.
func (pa *Patient) QueryGender() *GenderQuery {
	return (&PatientClient{config: pa.config}).QueryGender(pa)
}

// QueryTitle queries the title edge of the Patient.
func (pa *Patient) QueryTitle() *TitleQuery {
	return (&PatientClient{config: pa.config}).QueryTitle(pa)
}

// QueryJob queries the job edge of the Patient.
func (pa *Patient) QueryJob() *JobQuery {
	return (&PatientClient{config: pa.config}).QueryJob(pa)
}

// Update returns a builder for updating this Patient.
// Note that, you need to call Patient.Unwrap() before calling this method, if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return (&PatientClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", Card_id=")
	builder.WriteString(pa.CardID)
	builder.WriteString(", First_name=")
	builder.WriteString(pa.FirstName)
	builder.WriteString(", Last_name=")
	builder.WriteString(pa.LastName)
	builder.WriteString(", Allergic=")
	builder.WriteString(pa.Allergic)
	builder.WriteString(", Address=")
	builder.WriteString(pa.Address)
	builder.WriteString(", Age=")
	builder.WriteString(fmt.Sprintf("%v", pa.Age))
	builder.WriteString(", Birthday=")
	builder.WriteString(pa.Birthday.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient

func (pa Patients) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
