// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/panupong/app/ent/job"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// JobName holds the value of the "Job_name" field.
	JobName string `json:"Job_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges JobEdges `json:"edges"`
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Patients holds the value of the patients edge.
	Patients []*Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PatientsOrErr returns the Patients value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) PatientsOrErr() ([]*Patient, error) {
	if e.loadedTypes[0] {
		return e.Patients, nil
	}
	return nil, &NotLoadedError{edge: "patients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Job_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(values ...interface{}) error {
	if m, n := len(values), len(job.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	j.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Job_name", values[0])
	} else if value.Valid {
		j.JobName = value.String
	}
	return nil
}

// QueryPatients queries the patients edge of the Job.
func (j *Job) QueryPatients() *PatientQuery {
	return (&JobClient{config: j.config}).QueryPatients(j)
}

// Update returns a builder for updating this Job.
// Note that, you need to call Job.Unwrap() before calling this method, if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return (&JobClient{config: j.config}).UpdateOne(j)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v", j.ID))
	builder.WriteString(", Job_name=")
	builder.WriteString(j.JobName)
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

func (j Jobs) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
